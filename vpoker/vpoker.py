#NeoCasino Video Poker micropython game for Thumby
#License - MIT
#version = 1.0
#credits: SHDWWZRD

import thumby, random


thumby.display.setFPS(60)
#Video Poker images

NewNeoRetroWithURL = (# width, height 72, 40
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0xb6, 0x00, 0x30, 0x30, 0x80, 0x80, 0x00, 0xb6, 0xb6, 0x00, 0x00, 0xb6, 0xb6, 0x00, 
0x86, 0x86, 0x00, 0x06, 0x06, 0x00, 0x00, 0xb0, 0xb6, 0x06, 0x00, 0x00, 0x06, 0xb6, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x6d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x6d, 0x6d, 0x00, 0x00, 0x6d, 0x6d, 0x00, 
0x61, 0x61, 0x00, 0x60, 0x60, 0x00, 0x00, 0x0d, 0x6d, 0x60, 0x00, 0x00, 0x60, 0x6d, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0x00, 0x0c, 0x0c, 0x00, 0xd8, 0xd8, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x6c, 
0x6c, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x6c, 0x6c, 0x00, 0x0c, 0x0c, 0x00, 0xd8, 0xd8, 0x00, 0x00, 0x60, 0x60, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x6c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0xdb, 0x00, 0x03, 0x1b, 0x18, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0xdb, 0xdb, 0x00, 0xc3, 0xc3, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 
0xdb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdb, 0xdb, 0x00, 0x03, 0x1b, 0x18, 0xc0, 0xc0, 0x00, 0x00, 0x1b, 0x1b, 0xc0, 0xc0, 0x00, 0x00, 0xc0, 0xdb, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x08, 0x04, 0x38, 0x00, 0x18, 0x34, 0x28, 0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x3c, 0x08, 0x04, 0x00, 0x18, 0x2c, 0x28, 0x00, 0x04, 0x1e, 0x24, 0x00, 0x3c, 0x08, 0x04, 
0x00, 0x18, 0x24, 0x24, 0x18, 0x00, 0x20, 0x00, 0x18, 0x24, 0xa4, 0x78, 0x00, 0x18, 0x24, 0x04, 0x38, 0x00, 0x3c, 0x04, 0x38, 0x04, 0x38, 0x00, 0x18, 0x34, 0x28, 0x00, 0x28, 0x24, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
)
NeoCasinoVideoPoker_logo = (# width, height 72, 32
0xff, 0xff, 0x7f, 0x3f, 0xdf, 0xdf, 0x9f, 0x1f, 0xdf, 0xdf, 0x1f, 0x1f, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0x1f, 0x9f, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0x9f, 0x3f, 0xff, 0x7f, 0x3f, 0x9f, 0xdf, 0xdf, 0xdf, 0xdf, 0x9f, 0x3f, 
0xff, 0x1f, 0xdf, 0xdf, 0xdf, 0x1f, 0x3f, 0x9f, 0xdf, 0xdf, 0xdf, 0xdf, 0x9f, 0x3f, 0x1f, 0xdf, 0xdf, 0x1f, 0x1f, 0xdf, 0xdf, 0x9f, 0x1f, 0xdf, 0xdf, 0x1f, 0x1f, 0x9f, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0x9f, 0x3f, 0xff, 0xff, 0x0f, 0xe0, 0xff, 0x7f, 0x0f, 0xff, 0xfc, 0x7f, 0x07, 0xe0, 0xff, 0xff, 0xcf, 0xcc, 0x4c, 0x00, 0x7c, 0xff, 0xcf, 0xc1, 0xe0, 0xfc, 0x3f, 0x87, 0xf0, 0x01, 0x7c, 0xff, 0xc7, 0xc1, 0xe0, 0x70, 0x33, 0x83, 0xe0, 
0xf8, 0x7e, 0x63, 0xff, 0xff, 0x00, 0x70, 0xf3, 0xc7, 0xce, 0xfc, 0x79, 0x01, 0xc0, 0xfe, 0x7f, 0x07, 0xf0, 0xff, 0x7f, 0x0f, 0xff, 0xfc, 0x7f, 0x07, 0x00, 0x7c, 0xff, 0xcf, 0xc1, 0xe0, 0xfc, 0x3f, 0x87, 0xf0, 0xff, 0xff, 0xf8, 0xfa, 0xfa, 0xfa, 0xf8, 0xfa, 0xfa, 0xf9, 0xf8, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xf9, 0xfc, 0xf9, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xf8, 0xff, 0xff, 0xfc, 0xf9, 0xfa, 0xfa, 0xfa, 0xfa, 0xf9, 0xf8, 0xfa, 0xfa, 
0xfa, 0xf9, 0xf9, 0xfa, 0xfa, 0xf8, 0xf9, 0xfa, 0xfa, 0xfa, 0xfa, 0xf9, 0xf8, 0xfa, 0xfa, 0xf9, 0xf8, 0xfa, 0xfa, 0xf8, 0xf8, 0xfa, 0xfa, 0xf9, 0xfc, 0xfc, 0xf9, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xf8, 0xff, 0xff, 0xff, 0x00, 0x00, 0x18, 0x3c, 0x78, 0x3c, 0x18, 0x00, 0x00, 0x10, 0x38, 0x7c, 0x38, 0x10, 0x00, 0x00, 0x7e, 0x40, 0x3e, 0x00, 0x7e, 0x00, 0x7e, 0x42, 0x3c, 0x00, 0x7e, 0x4a, 0x42, 0x00, 0x3c, 0x42, 0x3c, 0x00, 0x00, 0x00, 
0x00, 0x7e, 0x0a, 0x0e, 0x00, 0x3c, 0x42, 0x3c, 0x00, 0x7e, 0x18, 0x66, 0x00, 0x7e, 0x4a, 0x42, 0x00, 0x7e, 0x0a, 0x76, 0x00, 0x00, 0x30, 0x58, 0x7c, 0x58, 0x30, 0x00, 0x00, 0x38, 0x5c, 0x7c, 0x5c, 0x38, 0x00, 0x00,
)
DeucesWild_logo_plus_mask = (# width, height 70, 16
(
0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0x08, 0xf8, 0xf0, 0x00, 0xc0, 0xe0, 0xa0, 0xe0, 0xc0, 0x00, 0xe0, 0xe0, 0x00, 0xe0, 0xe0, 0x00, 0xc0, 0xe0, 0x20, 0x20, 0x40, 0x00, 0xc0, 0xe0, 0xa0, 0xe0, 0xc0, 0x00, 0xc0, 
0xe0, 0xa0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0xe8, 0xe8, 0x00, 0xf8, 0xf8, 0x00, 0xc0, 0xe0, 0x20, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc7, 0xc7, 0xc4, 0xc7, 0xc3, 0xc0, 0xc3, 0xc7, 0xc4, 0xc4, 0xc2, 0xc0, 0xc3, 0xc7, 0xc4, 0xc7, 0xc7, 0xc0, 0xc3, 0xc7, 0xc4, 0xc4, 0xc2, 0xc0, 0xc3, 0xc7, 0xc4, 0xc4, 0xc2, 0xc0, 0xc2, 
0xc5, 0xc7, 0xc3, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc7, 0xc7, 0xc4, 0xc4, 0xc7, 0xc7, 0xc4, 0xc4, 0xc3, 0xc3, 0xc0, 0xc7, 0xc7, 0xc0, 0xc7, 0xc7, 0xc0, 0xc3, 0xc7, 0xc4, 0xc7, 0xc7, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, ),
(
0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0x08, 0xf8, 0xf0, 0x00, 0xc0, 0xe0, 0xa0, 0xe0, 0xc0, 0x00, 0xe0, 0xe0, 0x00, 0xe0, 0xe0, 0x00, 0xc0, 0xe0, 0x20, 0x20, 0x40, 0x00, 0xc0, 0xe0, 0xa0, 0xe0, 0xc0, 0x00, 0xc0, 
0xe0, 0xa0, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0x00, 0xf8, 0xf8, 0x00, 0xe8, 0xe8, 0x00, 0xf8, 0xf8, 0x00, 0xc0, 0xe0, 0x20, 0xf8, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x04, 0x07, 0x03, 0x00, 0x03, 0x07, 0x04, 0x04, 0x02, 0x00, 0x03, 0x07, 0x04, 0x07, 0x07, 0x00, 0x03, 0x07, 0x04, 0x04, 0x02, 0x00, 0x03, 0x07, 0x04, 0x04, 0x02, 0x00, 0x02, 
0x05, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x04, 0x04, 0x07, 0x07, 0x04, 0x04, 0x03, 0x03, 0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x03, 0x07, 0x04, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, )
)
JacksOrBetter_logo_plus_mask = (# width, height 70, 16
(
0x00, 0x80, 0x80, 0x00, 0xf8, 0xf8, 0x00, 0x40, 0xa0, 0xa0, 0xe0, 0xc0, 0x00, 0xc0, 0xe0, 0x20, 0x20, 0x40, 0x00, 0xf8, 0xf8, 0x80, 0x40, 0x20, 0x20, 0x00, 0xc0, 0xe0, 0xa0, 0x40, 0x00, 0x00, 0xc0, 0x20, 0xc0, 
0x00, 0xe0, 0x40, 0x00, 0x00, 0xf8, 0xf8, 0x48, 0xb8, 0xb0, 0x00, 0xc0, 0xe0, 0xa0, 0xe0, 0xc0, 0x20, 0xf8, 0xf8, 0x20, 0x20, 0xf8, 0xf8, 0x20, 0xc0, 0xe0, 0xa0, 0xe0, 0xc0, 0x00, 0xe0, 0xc0, 0x20, 0x40, 0x00, 0xc0, 0xc7, 0xc7, 0xc4, 0xc7, 0xc7, 0xc0, 0xc3, 0xc7, 0xc4, 0xc7, 0xc7, 0xc0, 0xc3, 0xc7, 0xc4, 0xc4, 0xc2, 0xc0, 0xc7, 0xc7, 0xc1, 0xc3, 0xc6, 0xc4, 0xc0, 0xc2, 0xc5, 0xc7, 0xc3, 0xc0, 0xc0, 0xc1, 0xc2, 0xc1, 
0xc0, 0xc3, 0xc0, 0xc0, 0xc0, 0xc7, 0xc7, 0xc4, 0xc7, 0xc3, 0xc0, 0xc3, 0xc7, 0xc4, 0xc4, 0xc2, 0xc0, 0xc3, 0xc7, 0xc4, 0xc0, 0xc3, 0xc7, 0xc4, 0xc3, 0xc7, 0xc4, 0xc4, 0xc2, 0xc0, 0xc7, 0xc7, 0xc0, 0xc0, 0xc0, ),
(
0x00, 0x80, 0x80, 0x00, 0xf8, 0xf8, 0x00, 0x40, 0xa0, 0xa0, 0xe0, 0xc0, 0x00, 0xc0, 0xe0, 0x20, 0x20, 0x40, 0x00, 0xf8, 0xf8, 0x80, 0x40, 0x20, 0x20, 0x00, 0xc0, 0xe0, 0xa0, 0x40, 0x00, 0x00, 0xc0, 0x20, 0xc0, 
0x00, 0xe0, 0x40, 0x00, 0x00, 0xf8, 0xf8, 0x48, 0xb8, 0xb0, 0x00, 0xc0, 0xe0, 0xa0, 0xe0, 0xc0, 0x20, 0xf8, 0xf8, 0x20, 0x20, 0xf8, 0xf8, 0x20, 0xc0, 0xe0, 0xa0, 0xe0, 0xc0, 0x00, 0xe0, 0xc0, 0x20, 0x40, 0x00, 0x00, 0x07, 0x07, 0x04, 0x07, 0x07, 0x00, 0x03, 0x07, 0x04, 0x07, 0x07, 0x00, 0x03, 0x07, 0x04, 0x04, 0x02, 0x00, 0x07, 0x07, 0x01, 0x03, 0x06, 0x04, 0x00, 0x02, 0x05, 0x07, 0x03, 0x00, 0x00, 0x01, 0x02, 0x01, 
0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x07, 0x04, 0x07, 0x03, 0x00, 0x03, 0x07, 0x04, 0x04, 0x02, 0x00, 0x03, 0x07, 0x04, 0x00, 0x03, 0x07, 0x04, 0x03, 0x07, 0x04, 0x04, 0x02, 0x00, 0x07, 0x07, 0x00, 0x00, 0x00, )
)
selector_plus_mask = (# width, height 70, 16
(# FRAME 1/3
0x00, 0xb6, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 
0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0x6c, 0x00, 0xc0, 0xcd, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 
0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdb, 0xc0, 
),
(# FRAME 1/3
0x00, 0xb6, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 
0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x6c, 0x00, 0x00, 0x0d, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 
0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x1b, 0x00, 
),
(# FRAME 2/3
0x00, 0x6c, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 
0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xb6, 0x00, 0xc0, 0xdb, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 
0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcd, 0xc0, 
),
(# FRAME 2/3
0x00, 0x6c, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 
0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0xb6, 0x00, 0x00, 0x1b, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 
0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x0d, 0x00, 
),
(# FRAME 3/3
0x00, 0xda, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 
0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xfe, 0xfc, 0xfe, 0xda, 0x00, 0xc0, 0xd6, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 
0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xdf, 0xcf, 0xdf, 0xd6, 0xc0, ),
(# FRAME 3/3
0x00, 0xda, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 
0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0x02, 0x00, 0x02, 0xda, 0x00, 0x00, 0x16, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 
0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x10, 0x00, 0x10, 0x16, 0x00, )
)

arrow_plus_mask = (# width, height 8, 8
(0xc7, 0x97, 0x37, 0x77, 
0x37, 0x97, 0xc7, 0xff, 
),
(0x00, 0x10, 0x30, 0x70, 
0x30, 0x10, 0x00, 0x00, 
),
(# FRAME 2/4
0xff, 0xc3, 0x9b, 0xbb, 
0x9b, 0xc3, 0xff, 0xff, 
),
(# FRAME 2/4
0x00, 0x00, 0x18, 0x38, 
0x18, 0x00, 0x00, 0x00, 
),
(# FRAME 3/4
0xff, 0xff, 0xc1, 0xdd, 
0xc1, 0xff, 0xff, 0xff, 
),
(# FRAME 3/4
0x00, 0x00, 0x00, 0x1c, 
0x00, 0x00, 0x00, 0x00, 
),
(# FRAME 4/4
0xff, 0xc3, 0x9b, 0xbb, 
0x9b, 0xc3, 0xff, 0xff, ),
(# FRAME 4/4
0x00, 0x00, 0x18, 0x38, 
0x18, 0x00, 0x00, 0x00, )
)
bet_panel_plus_mask = (# width, height 36, 32
(0xff, 0xf1, 0x0d, 0xfd, 0x0b, 0xeb, 0xeb, 0xeb, 0x2b, 0x2b, 0xab, 0xab, 0x2b, 0x6b, 0xeb, 0x2b, 0x2b, 0xab, 
0xab, 0xab, 0xeb, 0xeb, 0xab, 0xab, 0x2b, 0x2b, 0xab, 0xab, 0xeb, 0xeb, 0xeb, 0x0b, 0xfd, 0x0d, 0xf1, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0xbf, 0xbf, 0xa0, 0xa0, 0xad, 0xad, 0xa0, 0xb2, 0xbf, 0xa0, 0xa0, 0xad, 
0xad, 0xad, 0xbf, 0xbf, 0xbf, 0xbf, 0xa0, 0xa0, 0xbf, 0xbf, 0xbf, 0xbf, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf1, 0xf6, 0xf7, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 
0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xf7, 0xf6, 0xf1, 0xff, 
),
(0x0f, 0xf1, 0x0d, 0xfd, 0x0a, 0xea, 0xea, 0xea, 0x2a, 0x2a, 0xaa, 0xaa, 0x2a, 0x6a, 0xea, 0x2a, 0x2a, 0xaa, 
0xaa, 0xaa, 0xea, 0xea, 0xaa, 0xaa, 0x2a, 0x2a, 0xaa, 0xaa, 0xea, 0xea, 0xea, 0x0a, 0xfd, 0x0d, 0xf1, 0x0f, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xbf, 0xbf, 0xa0, 0xa0, 0xad, 0xad, 0xa0, 0xb2, 0xbf, 0xa0, 0xa0, 0xad, 
0xad, 0xad, 0xbf, 0xbf, 0xbf, 0xbf, 0xa0, 0xa0, 0xbf, 0xbf, 0xbf, 0xbf, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x1e, 0x11, 0x16, 0x17, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 
0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x17, 0x16, 0x11, 0x1e, 
),
(# FRAME 2/2
0xff, 0xf1, 0x0d, 0xfd, 0x0b, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 
0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0xeb, 0x0b, 0xfd, 0x0d, 0xf1, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 
0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xf1, 0xf6, 0xf7, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 
0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xf7, 0xf6, 0xf1, 0xff, ),
(# FRAME 2/2
0x0f, 0xf1, 0x0d, 0xfd, 0x0a, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 
0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0xea, 0x0a, 0xfd, 0x0d, 0xf1, 0x0f, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 
0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xbf, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0x00, 0xff, 0x00, 0x1e, 0x11, 0x16, 0x17, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 
0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x0a, 0x17, 0x16, 0x11, 0x1e, )
)
card_plus_mask = (# width, height 16, 24
(0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 
0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 
),
(0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 
0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 
0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 
),
(# FRAME 2/2
0x00, 0xfe, 0x02, 0xca, 0x32, 0x12, 0x4a, 0x8a, 
0x8a, 0x4a, 0x12, 0x32, 0xca, 0x02, 0xfe, 0x00, 0x00, 0xff, 0x00, 0x7e, 0x81, 0x18, 0xa5, 0x00, 
0x00, 0xa5, 0x18, 0x81, 0x7e, 0x00, 0xff, 0x00, 0x00, 0x7f, 0x40, 0x53, 0x4c, 0x48, 0x52, 0x51, 
0x51, 0x52, 0x48, 0x4c, 0x53, 0x40, 0x7f, 0x00, ),
(# FRAME 2/2
0x00, 0xfe, 0x02, 0xca, 0x32, 0x12, 0x4a, 0x8a, 
0x8a, 0x4a, 0x12, 0x32, 0xca, 0x02, 0xfe, 0x00, 0x00, 0xff, 0x00, 0x7e, 0x81, 0x18, 0xa5, 0x00, 
0x00, 0xa5, 0x18, 0x81, 0x7e, 0x00, 0xff, 0x00, 0x00, 0x7f, 0x40, 0x53, 0x4c, 0x48, 0x52, 0x51, 
0x51, 0x52, 0x48, 0x4c, 0x53, 0x40, 0x7f, 0x00, )
)
panel_plus_mask = (# width, height 72, 16
(0x03, 0xf3, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 
0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xfb, 0xf3, 0x03, 0xc0, 0xcf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 
0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xdf, 0xcf, 0xc0, ),
(0x02, 0xf2, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 
0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xfa, 0xf2, 0x02, 0x40, 0x4f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 
0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x5f, 0x4f, 0x40, )
)
suits_plus_mask = (# width, height 7, 8
(0xe7, 0xc3, 0x41, 0x00, 
0x41, 0xc3, 0xe7, 
),
(0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 
),
(# FRAME 2/4
0xef, 0xd7, 0xbb, 0x7d, 
0xbb, 0xd7, 0xef, 
),
(# FRAME 2/4
0x00, 0x10, 0x38, 0x7c, 
0x38, 0x10, 0x00, 
),
(# FRAME 3/4
0xe3, 0xdd, 0xbd, 0x7b, 
0xbd, 0xdd, 0xe3, 
),
(# FRAME 3/4
0x00, 0x1c, 0x3c, 0x78, 
0x3c, 0x1c, 0x00, 
),
(# FRAME 4/4
0x87, 0x87, 0x41, 0x01, 
0x41, 0x87, 0x87, ),
(# FRAME 4/4
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, )
)
quit_plus_mask = (# width, height 20, 8
(0x00, 0x7e, 0x42, 0x5a, 0x42, 0x5e, 0x7e, 0x42, 0x5e, 0x42, 
0x7e, 0x5a, 0x42, 0x5a, 0x7e, 0x7a, 0x42, 0x7a, 0x7e, 0x00, 
),
(0x00, 0x7e, 0x42, 0x5a, 0x42, 0x5e, 0x7e, 0x42, 0x5e, 0x42, 
0x7e, 0x5a, 0x42, 0x5a, 0x7e, 0x7a, 0x42, 0x7a, 0x7e, 0x00, 
),
(# FRAME 2/2
0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 
0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, ),
(# FRAME 2/2
0x00, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 
0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x00, )
)
deal_plus_mask = (# width, height 21, 8
(0x81, 0x3c, 0x7e, 0x42, 0x5a, 0x66, 0x7e, 0x42, 0x52, 0x5a, 0x7e, 
0x42, 0x6a, 0x42, 0x7e, 0x42, 0x5e, 0x5e, 0x7e, 0x3c, 0x81, 
),
(0x00, 0x3c, 0x7e, 0x42, 0x5a, 0x66, 0x7e, 0x42, 0x52, 0x5a, 0x7e, 
0x42, 0x6a, 0x42, 0x7e, 0x42, 0x5e, 0x5e, 0x7e, 0x3c, 0x00, 
),
(# FRAME 2/2
0x81, 0x3c, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 
0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x3c, 0x81, ),
(# FRAME 2/2
0x00, 0x3c, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 
0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x7e, 0x3c, 0x00, )
)







#classes
class Card:
    def __init__(self, _init_x:int, _init_y:int, _owner:int, _num:int, _suit:int):
        self.x = _init_x
        self.y = _init_y
        self.hold = True
        #true=hold, false=drop
        self.owner = _owner
        #-1=nobody,0=deck,1=player
        self.num = _num
        """
            0=Ace
            1-9=2-10
            10=J
            11=Q
            12=K
        """
        self.suit = _suit
        """
            0-Heart
            1-Diamond
            2-Club
            3-Spade
        """
        self.faceup = False
    





#constants and variables            
frame_counter = 0
game_location= 0 #location in game
"""
0-place bet
1-pass out n flip cards animation
2-keep or discard
3-deal
4-gameover
"""
MG=0#money gained on previous game
curframe=0#animation frame

card_passing_out_animation=0#initial card passing out phase
#temp X n Y coord of animated card
TempCX = 50
TempCY = -8

PBetloc = 0 # Place Bet location
HoDloc = 0 # Hold or Drop location

cursor_x = 0
CurrentBet = 10
TempBet = 5
INC = 5#increment
RESULT = 0
"""
0=nada
1=pair 
2=two pair
3=3 of a kind
4=straight
5=flush
6=full house
7=4 of a kind
8=straight flush
9=royal flush
"""
DeckSize=52;
DX = 28 # deck x coord
DY = -32 # deck y coord
# Generate 52 card deckfor(int i=0;i<DeckSize;i++){
deck = []
for i in range(0, 52):
    deck.append(Card(DX,DY,0,int(i/4),i%4))
# Generate 5 card hand
hand = []
for i in range(0, 5):
    hand.append(Card(14*i,20,0,0,0))
OnCard=0#which card in the deck that is next
TC=0#card the hand is on

MaxFPS = 60
frame_counter = 0
cursor_location = 0 #the game currently on
currency = 1000 #players starting currency
gameState = 0
"""
0=neo retro logo
2=neo casino game logo animated
3=select a game to load +shows the players currency
4=Video Poker Deuces Wild
"""

game_type = 0
"""
0=Jacks or better
1=deuces wild
"""





#SHARED FUNCTIONS
def drawSprite( inspr, x:int, y:int, width:int, height:int, mirrorX:bool, mirrorY:bool, key:int, frame = 0, masked = False):
    sprite = []
    if(type(inspr[0]) == tuple):#animated sprite data
        if(masked):#masked
            sprite.append(bytearray(inspr[2*frame]))
            sprite.append(bytearray(inspr[2*frame+1]))
        else:#not masked
            sprite.append(bytearray(inspr[frame]))
    else:#not animated can not be masked
        sprite.append(bytearray(inspr))          

    if(mirrorX):
        for dy in range(0, height >> 3):
            for dx in range(0, width >> 1):
                temp = sprite[0][dy * width + dx]
                sprite[0][dy * width + dx] = sprite[0][dy*width + (width-dx-1)]
                sprite[0][dy*width+(width-dx-1)] = temp
                if(masked):#masked
                    temp = sprite[1][dy * width + dx]
                    sprite[1][dy * width + dx] = sprite[1][dy*width + (width-dx-1)]
                    sprite[1][dy*width+(width-dx-1)] = temp
    if(mirrorY):
        for dx in range(0, width):
            for dy in range(0, height >> 4):
                temp = sprite[0][dy * width + dx]
                sprite[0][dy*width+dx] = reverse_order(sprite[0][((height >> 3)-dy-1)*width+dx])
                sprite[0][((height >> 3)-dy-1)*width+dx] = reverse_order(temp)
                if(masked):#masked
                    temp = sprite[1][dy * width + dx]
                    sprite[1][dy*width+dx] = reverse_order(sprite[1][((height >> 3)-dy-1)*width+dx])
                    sprite[1][((height >> 3)-dy-1)*width+dx] = reverse_order(temp)
    if(masked):
        thumby.display.blit(sprite[0], x, y, width, height, 1,0,0)
        thumby.display.blit(sprite[1], x, y, width, height, 0,0,0)
    else:
        thumby.display.blit(sprite[0], x, y, width, height, key,0,0)
     
def getCamSmoothMove(distance:int):
    off = abs(distance)
    if (off >= 40):
        if(distance < 0):
            off = -20
        else:
            off = 20
    elif (off >= 4):
        off = int(distance / 2)
    elif (off > 0):
        if(distance < 0):
            off = -1
        else:
            off = 1
    else:
        off = 0
    return off


#functions

def ShuffleDeck():
    i = 0
    j = 0
    k = 0
    tmp = Card(0,0,0,0,0);
    for i in range(DeckSize):
        j = random.randint(1, DeckSize)-1
        k = random.randint(1, DeckSize)-1
        tmp = deck[j]
        deck[j] = deck[k]
        deck[k] = tmp
    
def TakeAwayCards():
    #remove dropped cards from the screen 
    for i in range(5):
        if(hand[i].hold==False):
            hand[i].owner=-1
            
def drawHUD():
    #draw black frame
    thumby.display.drawFilledRectangle(0,0,72,9,0)
    c = str(currency)
    thumby.display.drawText(c,0,0,1)

def drawCard(X, Y, showBack):
    if(showBack):
        drawSprite(card_plus_mask,X,Y,16,24,False,False,-1,1,True)
    else:
        drawSprite(card_plus_mask,X,Y,16,24,False,False,-1,0,True)

def drawCards():
    #draw deck
    #drawCard(DX,DY,True)

    #draw hand
    for i in range(5):
        if(hand[i].owner==1):
            if(hand[i].FaceUp):
                #draw card face
                drawCard(hand[i].x,hand[i].y,False);
                #draw value
                strt=""
                if(hand[i].num>0 and hand[i].num<10):
                    strt=""+str((hand[i].num)+1)
                elif(hand[i].num==0):
                    strt="A";
                elif(hand[i].num==12):
                    strt="K";
                elif(hand[i].num==11):
                    strt="Q";
                elif(hand[i].num==10):
                    strt="J";                
                thumby.display.drawText(strt,hand[i].x+2,hand[i].y+2,0);
                #draw suit
                drawSprite(suits_plus_mask,hand[i].x+2,hand[i].y+11,7,8,False,False,-1,hand[i].suit,True)
            else:
                #draw card back
                drawCard(hand[i].x,hand[i].y,True);

def drawPlaceBet():
    global TempBet
    global PBetloc
    global curframe
    global CurrentBet
    global currency
    global game_location
    global gameState
    curframe+=.1
    if(curframe>1.9):
        curframe=0
    
    #draw frame
    if(PBetloc==0):#active bet frame
        drawSprite(bet_panel_plus_mask,18,10,36,32,False,False,-1,int(curframe),True)
        drawSprite(deal_plus_mask,51,0,21,8,False,False,-1,0,True)
        #value
        st = str(TempBet);
        if(TempBet<10):
            st = "0"+st
        if(TempBet<100):
            st = "0"+st
        thumby.display.drawText(st,24,26,0);
    elif(PBetloc==1):#static bet frame animated deal button
        drawSprite(bet_panel_plus_mask,18,10,36,32,False,False,-1,0,True)  
        drawSprite(deal_plus_mask,51,0,21,8,False,False,-1,int(curframe),True)   
        #value
        st = str(TempBet);
        if(TempBet<10):
            st = "0"+st
        if(TempBet<100):
            st = "0"+st
        thumby.display.drawText(st,24,26,0);   
    else:#show quit button
        drawSprite(quit_plus_mask,26,20,20,8,False,False,-1,int(curframe),True)
        drawSprite(deal_plus_mask,51,0,21,8,False,False,-1,0,True)

    #handle key inputs
    if(thumby.dpadJustPressed() == True):#up toggle between enter amount and insert coins
        PBetloc+=1
        if(PBetloc>2):
            PBetloc=0
    elif(thumby.actionJustPressed() == True):#buton change bet amount and insert coins
        if(PBetloc==0):
            TempBet+=5;
            if(TempBet>25):
                TempBet=5  
        elif(PBetloc==1):            
            if(currency>=TempBet):
                CurrentBet=TempBet
                currency-=TempBet
                game_location=1  
        elif(PBetloc==2):    #quit 
            gameState=2

def drawPassOutCards():
    global card_passing_out_animation
    global TempCX
    global TempCY
    global game_location
    global hand
    global OnCard
    global RESULT
    #must pass out 5 cards start of new game
    if(card_passing_out_animation<5):
        #first pass out card to player spot 1 / flip up
        #theN pass out card to player spot 2 /FLIP UP
        if(TempCX!=hand[card_passing_out_animation].x):
            TempCX+=getCamSmoothMove(hand[card_passing_out_animation].x-TempCX)
        if(TempCY!=hand[card_passing_out_animation].y):
            TempCY+=getCamSmoothMove(hand[card_passing_out_animation].y-TempCY)
        drawCard(TempCX,TempCY,True);
        if(TempCX==hand[card_passing_out_animation].x and TempCY==hand[card_passing_out_animation].y):
            TempCX=DX
            TempCY=DY
            hand[card_passing_out_animation].num=deck[OnCard].num
            hand[card_passing_out_animation].suit=deck[OnCard].suit            
            hand[card_passing_out_animation].FaceUp=True
            hand[card_passing_out_animation].owner=1            
            OnCard+=1
            card_passing_out_animation+=1
    else:
        card_passing_out_animation=0
        game_location = 2
        RESULT=CheckHand()

def drawReplaceCards():
    global TempCX
    global TempCY
    global game_location
    global hand
    global OnCard
    global currency
    global RESULT
    global MG
    if(hand[0].owner<0):
        idx = 0
    elif(hand[1].owner<0):
        idx = 1
    elif(hand[2].owner<0):
        idx = 2
    elif(hand[3].owner<0):
        idx = 3
    elif(hand[4].owner<0):
        idx = 4
    else:
        idx = 5
    if(idx<5):
        if(TempCX!=hand[idx].x):
            TempCX+=getCamSmoothMove(hand[idx].x-TempCX)
        if(TempCY!=hand[idx].y):
            TempCY+=getCamSmoothMove(hand[idx].y-TempCY)
        drawCard(TempCX,TempCY,True);
        if(TempCX==hand[idx].x and TempCY==hand[idx].y):
            TempCX=DX
            TempCY=DY
            hand[idx].num = deck[OnCard].num
            hand[idx].suit = deck[OnCard].suit            
            hand[idx].FaceUp = True  
            hand[idx].hold = True  
            hand[idx].owner = 1               
            OnCard+=1
    else:
        RESULT=CheckHand();
        if(RESULT>0):
            if(game_type==0):#jacks or better
                if(RESULT==1):#pair
                        MG=int(CurrentBet)*1 
                elif(RESULT==2):#2 pair
                        MG=int(CurrentBet)*2
                elif(RESULT==3):#trips
                        MG=int(CurrentBet)*3
                elif(RESULT==4):#straght
                        MG=int(CurrentBet)*4
                elif(RESULT==5):#flush
                        MG=int(CurrentBet)*6
                elif(RESULT==6):#full house
                        MG=int(CurrentBet)*9
                elif(RESULT==7):#fourzes
                        MG=int(CurrentBet)*25
                elif(RESULT==8):#straight flush
                        MG=int(CurrentBet)*50
                elif(RESULT==9):#natural royal flush
                        MG=int(CurrentBet)*800
                currency+=MG
            else: #deuces wild
                if(RESULT==1):#pair
                        MG=0;
                elif(RESULT==2):#2 pair
                        MG=0;
                elif(RESULT==3):#trips
                        MG=int(CurrentBet)*1
                elif(RESULT==4):#straght
                        MG=int(CurrentBet)*2
                elif(RESULT==5):#flush
                        MG=int(CurrentBet)*2
                elif(RESULT==6):#full house
                        MG=int(CurrentBet)*3
                elif(RESULT==7):#fourzes
                        MG=int(CurrentBet)*5
                elif(RESULT==8):#straight flush
                        MG=int(CurrentBet)*9
                elif(RESULT==9):#natural royal flush
                        MG=int(CurrentBet)*800
                elif(RESULT==13):#fivzes
                        MG=int(CurrentBet)*15
                elif(RESULT==14):#Wild Royal Flush	
                        MG=int(CurrentBet)*25
                elif(RESULT==15):#4 deuces
                        MG=int(CurrentBet)*200
                currency+=MG;
        game_location=4;

def drawGameOver():
    global curframe
    global game_location
    global PBetloc
    global HoDloc
    global OnCard
    global hand
    global MG
    curframe+=.05
    if(curframe>1.95):
        curframe=0
    if(int(curframe)==0):
        drawSprite(panel_plus_mask,0,12,72,16,False,False,-1,0,True)
        if(RESULT==0):
            thumby.display.drawText("NOTHING",8,16,0)
        elif(RESULT==1):
            thumby.display.drawText("PAIR",20,16,0)
        elif(RESULT==2):
            thumby.display.drawText("TWO PAIR",4,16,0)
        elif(RESULT==3):
            thumby.display.drawText("TRIPS",16,16,0)
        elif(RESULT==4):
            thumby.display.drawText("STRAIGHT",4,16,0)
        elif(RESULT==5):
            thumby.display.drawText("FLUSH",16,16,0)
        elif(RESULT==6):
            thumby.display.drawText("FULLHOUSE",0,16,0)
        elif(RESULT==7):
            thumby.display.drawText("FOURZES",6,16,0)
        elif(RESULT==8):
            thumby.display.drawText("STR FLUSH",0,16,0)
        elif(RESULT==9):
            thumby.display.drawText("RYL FLUSH",0,16,0)
        elif(RESULT==10):
            thumby.display.drawText("4 SEVENS",4,16,0)
        elif(RESULT==11):
            thumby.display.drawText("4 EIGHTS",4,16,0)
        elif(RESULT==12):
            thumby.display.drawText("4 ACES",12,16,0)
        elif(RESULT==13):
            thumby.display.drawText("FIVZES",12,16,0)
        elif(RESULT==14):
            thumby.display.drawText("WILD RYL",4,16,0)
        elif(RESULT==15):
            thumby.display.drawText("4 DEUCES",4,16,0)
        drawSprite(panel_plus_mask,0,25,72,16,False,False,-1,0,True)
        thumby.display.drawText("+ "+str(MG),24,29,0)
    
    #handle key inputs
    if(thumby.actionJustPressed() == True):#buton return to beginning
        cfgfile = open("/Games/vpoker/vpoker.cfg", "w")
        cfgfile.write(str(currency))
        cfgfile.close()
        game_location=0
        OnCard=0
        ShuffleDeck()
        PBetloc=1
        HoDloc=0
        MG=0
        for i in range(5):
            hand[i].owner=-1

def SortHand(hand_copy):
    tmp = Card(0,0,0,0,0)
    for i in range(1,5):
        if(hand_copy[0].num > hand_copy[i].num):
            #swap
            tmp=hand_copy[i]
            hand_copy[i]=hand_copy[0]
            hand_copy[0]=tmp 
    for i in range(2,5):
        if(hand_copy[1].num>hand_copy[i].num):
            #swap
            tmp=hand_copy[i]
            hand_copy[i]=hand_copy[1]
            hand_copy[1]=tmp  
    for i in range(3,5):
        if(hand_copy[2].num>hand_copy[i].num):
            #swap
            tmp=hand_copy[i]
            hand_copy[i]=hand_copy[2]
            hand_copy[2]=tmp
    for i in range(4,5):
        if(hand_copy[3].num>hand_copy[i].num):
            #swap
            tmp=hand_copy[i]
            hand_copy[i]=hand_copy[3]
            hand_copy[3]=tmp
    return hand_copy;

def CheckHand():
    #determine what type of hand the player hashand = []
    hand_copy = []
    for i in range(0, 5):
        hand_copy.append(hand[i])
 
    #sort the hand for faster/easier processing
    hand_copy = SortHand(hand_copy);
    
    #go down the list and see if they got it
    
    if(game_type == 1): #deuces wild game type
        # check for Natural Royal Flush
        if (isRoyalFlush(hand_copy)):     
            return 9;
    
        if(isWildCards(hand_copy)):
            Wilds=NumberOfWildCards(hand_copy);
            
                            
            # compute counts of each value, for faster checking of 2's and 3's
            valueGrouping = computeValueGrouping(hand_copy);
            
            #4 deuces
            if ((hand_copy[0].num == hand_copy[1].num and hand_copy[0].num == hand_copy[2].num and
                hand_copy[0].num == hand_copy[3].num) or  (hand_copy[1].num == hand_copy[2].num and 
                hand_copy[1].num == hand_copy[3].num and hand_copy[1].num == hand_copy[4].num)):
                if(hand_copy[1].num==1):
                    return 15
            
            #Wild Royal Flush
            if (isWildRoyalFlush(hand_copy,Wilds,valueGrouping)):       
                return 14
                                
            #check for 5 of a kind
            test=False;
            for i in range(13):
                if(valueGrouping[i]==5):
                    test=True;
            if(test):
                return 13#5 of a kind
                            
            # check for straight flush
            if (isWildStraight(hand_copy,Wilds) and isWildFlush(hand_copy,Wilds)):
                return 8;
            
            # check for 4 of a kind
            test=False;
            for i in range(13):
                if(valueGrouping[i]==4):
                    test=True;
            if(test):
                return 7#4 of a kind
            
            # check for full house
            marks=0;
            for i in range(13):
                if(valueGrouping[i]==3):
                    marks+=1
            if(marks==2):
                return 6#full house
            
            #check for flush
            if (isWildFlush(hand_copy,Wilds)):
                return 5;
            
            #check for straight
            if (isWildStraight(hand_copy,Wilds)):
                return 4;
            
            # check for three of a kind
            if (isThreeOfAKind(valueGrouping)):
                return 3;
            
            # if nothing matched, return 0
            return 0;
        else:# no wild cards
            # check for straight flush
            if (isStraight(hand_copy) and isFlush(hand_copy)):
                return 8
            
            # check for four of a kind
            if ((hand_copy[0].num == hand_copy[1].num and hand_copy[0].num == hand_copy[2].num and
                hand_copy[0].num == hand_copy[3].num) or  (hand_copy[1].num == hand_copy[2].num and
                hand_copy[1].num == hand_copy[3].num and hand_copy[1].num == hand_copy[4].num)):
                #return index for four of a kind
                return 7;
            
            # check for full house
            if (isFullHouse(hand_copy)):
                return 6
            
            #check for flush
            if (isFlush(hand_copy)):
                return 5;
            
            #check for straight
            if (isStraight(hand_copy)):
                return 4;
            
            #compute counts of each value, for faster checking of 2's and 3's
            valueGrouping = computeValueGrouping(hand_copy);
            
            #check for three of a kin
            if (isThreeOfAKind(valueGrouping)):
                return 3;
            
            #if nothing matched, return 0
            return 0
    else: #Jacks or bettter
        # check for Natural Royal Flush
        if (isRoyalFlush(hand_copy)):     
            return 9;
            
        # check for straight flush
        if (isStraight(hand_copy) and isFlush(hand_copy)):
            return 8
        
        # check for four of a kind
        if ((hand_copy[0].num == hand_copy[1].num and hand_copy[0].num == hand_copy[2].num and
            hand_copy[0].num == hand_copy[3].num) or  (hand_copy[1].num == hand_copy[2].num and
            hand_copy[1].num == hand_copy[3].num and hand_copy[1].num == hand_copy[4].num)):
            #return index for four of a kind
            return 7;
        
        # check for full house
        if (isFullHouse(hand_copy)):
            return 6
        
        #check for flush
        if (isFlush(hand_copy)):
            return 5;
        
        #check for straight
        if (isStraight(hand_copy)):
            return 4;
        
        #compute counts of each value, for faster checking of 2's and 3's
        valueGrouping = computeValueGrouping(hand_copy);
        
        #check for three of a kin
        if (isThreeOfAKind(valueGrouping)):
            return 3;
        
        # check for two pair
        if (isTwoPair(valueGrouping)):
            return 2
        
        # check for jacks or better
        if (isJacksOrBetter(valueGrouping)): 
            return 1
	        
        #if nothing matched, return 0
        return 0
    
def isWildCards(hand_copy):
    for i in range(5):
        if(hand_copy[i].num==1):#2
            return True;
    return False;
    
def NumberOfWildCards(hand_copy):
    Number=0;
    for i in range(5):
        if(hand_copy[i].num==1):#2
            Number+=1
    return Number;

# this function counts the number of cards of each value.  This is useful
# for looking for groups of cards like pairs, threes, full house, etc.
def computeValueGrouping(hand_copy):
    values = [0,0,0,0,0,0,0,0,0,0,0,0,0];    
    # count the number of cards of each value
    for i in range(5):
        values[hand_copy[i].num]+=1  
    if(game_type==1):
        for t in range(5):#add deuces to all other groups
            if(hand_copy[t].num==1):#2
                for u in range(13):
                    if(u!=1):
                        if(values[u]>0):
                            values[u]+=1;                  
    return values;
    
# checks if the hand is jacks or better.  Requires the results of the above
# computeValueGrouping function
def isJacksOrBetter(valueGrouping):
    if (valueGrouping[0]==2 or valueGrouping[10]==2 or valueGrouping[11]==2 or valueGrouping[12]==2):
        return True
    return False

# checks if the hand is two pair.  Requires the results of the above
# computeValueGrouping function
def isTwoPair(valueGrouping):
    for i in range(13):
        if (valueGrouping[i]==2):
            # check for another 2
            t=i+1
            for j in range(t,13):
                if (valueGrouping[j]==2):
                    return True
    return False;
    
# checks if the hand is three of a kind.  Requires the results of the above
# computeValueGrouping function
def isThreeOfAKind(valueGrouping):
    for i in range(13):
        if (valueGrouping[i]==3):
            return True;
    return False;
    
# checks if the card is a flush
def isFlush(hand_copy):
    # get suit of first card
    suit = hand_copy[0].suit;
    # check each remaining card for same suit, if not return false
    for i in range(1,5):
        if (suit != hand_copy[i].suit):
            return False;
    # if here, then all match, return true
    return True
    
# checks if the card is a flush
def isWildFlush(hand_copy,Wilds):
    # get suit of first card
    suit=0;
    if(hand_copy[0].num!=1):#no 2
        suit = hand_copy[0].suit;
    elif(hand_copy[1].num!=1):#no 2
        suit = hand_copy[1].suit;
    elif(hand_copy[2].num!=1):#no 2
        suit = hand_copy[2].suit;
    elif(hand_copy[3].num!=1):#no 2
        suit = hand_copy[3].suit;    
    # check each remaining card for same suit, if not return false
    for i in range(5):
        if(hand_copy[i].num!=1):
            if (suit != hand_copy[i].suit):
                return False;
    # if here, then all match, return true
    return True
    
# checks if the hand is a straight
def isStraight(hand_copy):
    # if first card is an ACE then special handling required
    # since it can be used as a 1 or higher than king
    if (hand_copy[0].num == 0):
        if (hand_copy[1].num==1 and hand_copy[2].num==2 and hand_copy[3].num==3 and hand_copy[4].num==4):
            return True;
        elif (hand_copy[1].num==9 and hand_copy[2].num==10 and hand_copy[3].num==11 and hand_copy[4].num==12):
            return True;
        else:
            return False;
    else:
        # no ace, just go up the line.  Check if each card is 1 greater than
        # the previous card
        for i in range(4):
            if (hand_copy[i+1].num - hand_copy[i].num != 1):
                return False;
        return True;    
    
# checks if the hand is a straight
def isWildStraight(hand_copy,Wilds):
    #if first card is an ACE then special handling required
    #since it can be used as a 1 or higher than king
    if (hand_copy[0].num == 0):
        if(Wilds==1):
            if (hand_copy[2].num==2 and hand_copy[3].num==3 and hand_copy[4].num==4):
                return True;
            else:
                if (hand_copy[2].num!=hand_copy[3].num and hand_copy[4].num!=hand_copy[3].num and hand_copy[2].num>8):
                    return True;
        elif(Wilds==2):
            if (hand_copy[4].num<=4):
                return True;
            else:
                if (hand_copy[4].num!=hand_copy[3].num and hand_copy[3].num>8):
                    return True;
        elif(Wilds==3):
            if (hand_copy[4].num<=4):
                return True;
            else:
                if (hand_copy[4].num>8):
                    return True
    else:
        # no ace, just go up the line.  Check if each card is 1 greater than
        # the previous card
        if(Wilds==1):
            if (hand_copy[4].num - hand_copy[1].num <= 4 and hand_copy[1].num!=hand_copy[2].num and hand_copy[2].num!=hand_copy[3].num and hand_copy[4].num!=hand_copy[3].num):
                return True
        elif(Wilds==2):
            if (hand_copy[4].num - hand_copy[2].num <= 4 and hand_copy[2].num!=hand_copy[3].num and hand_copy[4].num!=hand_copy[3].num):
                return True
        elif(Wilds==3):
            if (hand_copy[4].num - hand_copy[3].num <= 4 and hand_copy[4].num!=hand_copy[3].num):
                return True                 
        return False    
    return False;
    
# check for a full house.
def isFullHouse(hand_copy):
    return ((hand_copy[0].num == hand_copy[1].num and hand_copy[2].num == hand_copy[3].num and 
    hand_copy[2].num == hand_copy[4].num) or (hand_copy[0].num == hand_copy[1].num and 
    hand_copy[0].num == hand_copy[2].num and hand_copy[3].num == hand_copy[4].num));        
       
# check for a royal flush
def isRoyalFlush(hand_copy):
    return (hand_copy[0].num==0 and hand_copy[4].num==12 and isFlush(hand_copy) and isStraight(hand_copy));
    
def isWildRoyalFlush(hand_copy, Wilds, valueGrouping): 
    if(isWildFlush(hand_copy,Wilds) and isWildStraight(hand_copy,Wilds)):
        # total number of cards between ace->10
        good = 0
        if(valueGrouping[0]==1):#ace
            good+=1
        elif(valueGrouping[12]==1):#king
            good+=1
        elif(valueGrouping[11]==1):#queen
            good+=1
        elif(valueGrouping[10]==1):#jack
            good+=1
        elif(valueGrouping[9]==1):#10
            good+=1
                
        if(Wilds==1 and good==4):#if 1 wild then need 4 cards between ace->10
            return True  
        if(Wilds==2 and good==3):#if 2 wilds then need 3 cards betwwen ace->10
            return True 
        if(Wilds==3 and good==2):#if 3 wilds then need 2 cards between ace->10
            return True         
    return False

def updateGame():
    global curframe
    drawCards()
    global game_location
    global TempBet
    global currency
    global HoDloc
    drawHUD()
    if(game_location==0):#place bet
        drawPlaceBet()
    elif(game_location==1):#pass out cards animation
        drawPassOutCards()
    elif(game_location==2):#Hold / drop
        curframe+=.2
        if(curframe>3.9):
            curframe=0
        if(HoDloc<5):
            drawSprite(arrow_plus_mask,hand[HoDloc].x+2,hand[HoDloc].y-8,8,8,True,True,-1,int(curframe),True)
            drawSprite(deal_plus_mask,51,0,21,8,False,False,-1,0,True)
        else:
            drawSprite(deal_plus_mask,51,0,21,8,False,False,-1,int(curframe/2),True)

        #handle key inputs
        if(thumby.dpadJustPressed() == True):#left
            HoDloc+=1
            if(HoDloc>5):
                HoDloc=0
        elif(thumby.actionJustPressed() == True):#buton flip hold/drop on card over
            if(HoDloc<5):
                if(hand[HoDloc].hold==True):
                    hand[HoDloc].hold=False
                    hand[HoDloc].FaceUp=False
                else:
                    hand[HoDloc].hold=True
                    hand[HoDloc].FaceUp=True
            else:
                TakeAwayCards()
                game_location=3            
    elif(game_location==3):#draw new cards to correct position
        drawReplaceCards()
    elif(game_location==4):#game over
        drawGameOver()
  
  
  
  
  
  
    
#INITIALIZE
ShuffleDeck()



thumby.display.setFont('lib/font8x8.bin', 8, 8, 0)




# Main game loop
while(True):
    thumby.display.fill(1)
    if(gameState==0):#//neo retro show splash screen
        drawSprite(NewNeoRetroWithURL, 0, 0, 72, 40,False,False,-1)
        frame_counter+=1
        if (frame_counter >= (MaxFPS * 3) or thumby.inputJustPressed() == True):
            frame_counter = 0
            gameState = 1
            try:
                conf = open("/Games/vpoker/vpoker.cfg", "r").read().split()
            except OSError:
                conf = open("/Games/vpoker/vpoker.cfg", "w")
                conf.write(""+str(currency)+" ")
                conf = open("/Games/vpoker/vpoker.cfg", "r").read().split()
            if(len(conf)>0):
                currency = int(conf[0])
    elif(gameState==1):#neo casino logo
         #draw black frame
        thumby.display.drawFilledRectangle(0,0,72,9,0)
        thumby.display.drawText(str(currency),0,0,1)
        #display game logo
        drawSprite(NeoCasinoVideoPoker_logo,0,8,72,32,False,False,-1)
        frame_counter+=1
        if (frame_counter >= (MaxFPS * 3) or thumby.inputJustPressed() == True):
            frame_counter = 0
            gameState=2
    elif(gameState==2):#select a game type
        #draw black frame
        thumby.display.drawFilledRectangle(0,0,72,9,0)
        thumby.display.drawText(str(currency),0,0,1)
        #display animated game logos and slide to active locations
        #animated logo are 70x24
        frame_counter+=.25
        if (frame_counter >= 2.99):
            frame_counter = 0
        drawSprite(JacksOrBetter_logo_plus_mask,1,10,70,16,False,False,-1,0,True)
        drawSprite(DeucesWild_logo_plus_mask,1,25,70,16,False,False,-1,0,True)
        drawSprite(selector_plus_mask,1,10+cursor_location*15,70,16,False,False,-1,int(frame_counter),True)
        if(thumby.dpadJustPressed() == True):#move to next game
            cursor_location+=1
            if(cursor_location>1):
                cursor_location=0;
        if(thumby.actionJustPressed() == True):#action start game on
            game_type = cursor_location
            gameState=3
            PBetloc=0
    elif(gameState==3):#video poker deuces wild
        updateGame()
    thumby.display.update()    